// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// api/build-request.schema.json
// api/resource.schema.json
// api/resources/gcp/project.schema.json
// api/protocol/init.request.schema.json
// api/protocol/init.response.schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildRequestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x4e\xf3\x30\x10\xc4\xef\x79\x8a\x95\xbf\xef\x88\xeb\x72\x42\xe4\xd6\x3b\x87\x9e\xa9\x22\xe4\xc4\x9b\xc6\x55\x1a\x1b\xef\x06\x89\x56\x79\x77\xe4\xfc\x53\x10\x46\x5c\xa2\x78\xfc\x9b\xd1\x8e\xf7\x9e\x01\x00\x88\xff\x54\x35\x78\xd5\x22\x07\xd1\x30\xfb\x5c\xa9\x0b\xb9\x4e\x4e\xea\xce\x85\xb3\x32\x41\xd7\x2c\xf7\x4f\x6a\xd2\xfe\x89\x87\xd9\x69\xcd\xc6\x75\xb6\x7c\xeb\xfd\xae\x72\x57\xf5\xf1\xa8\xca\xde\xb6\x46\x06\x7c\xef\x91\x78\x37\x87\xc5\xe0\xc5\x6c\x90\xaa\x60\x3d\x5b\xd7\xc5\x90\x03\x8c\x0e\x58\x1c\x0b\xc6\x9f\x1e\xe3\xbd\x2b\x2f\x58\xf1\xa2\x6a\x63\x6c\x74\xea\xf6\x18\x9c\xc7\xc0\x16\x49\xe4\x50\xeb\x96\x70\x46\x62\x90\x0d\x18\x27\x3c\x8d\xca\xac\x92\xeb\x43\x85\x24\x46\xad\x98\x61\xbf\x4d\xb9\xa7\xf0\xad\x9c\x9a\xff\xc5\x12\x83\xab\x61\x75\x00\x3b\x28\x11\xb4\xf7\xad\x45\x03\x9a\xc0\xeb\x30\x22\xdc\x58\x4a\xb7\x5d\xc3\x93\xad\xd7\xdb\xbf\xdb\xaf\xa8\xd7\xcc\x18\xba\x63\xba\xdf\x8a\x9d\xb4\xbc\x15\xf1\x73\x90\xaf\x7b\xf9\xfc\x26\xc7\x43\x91\x84\xa7\xd5\x07\xac\x7f\xdd\xfd\xf2\x06\xdf\xd6\xfe\x23\x67\xc8\xd2\xa7\xe9\x6f\xc8\x86\xec\x2b\x00\x00\xff\xff\xf8\x1b\x6f\x9f\xa1\x02\x00\x00")

func buildRequestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_buildRequestSchemaJson,
		"build-request.schema.json",
	)
}

func buildRequestSchemaJson() (*asset, error) {
	bytes, err := buildRequestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build-request.schema.json", size: 673, mode: os.FileMode(436), modTime: time.Unix(1535217763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x4e\xf3\x30\x10\xc4\xef\x7d\x8a\x95\xbf\xef\x00\x12\x4d\x40\x1c\x90\x72\x43\xe2\xc8\x01\x21\x6e\x88\x83\x71\x36\xce\x96\xc6\x36\xeb\x35\x02\xaa\xbe\x3b\x72\xf3\xa7\x69\x01\x89\x4b\xa4\xcc\xfe\x76\x33\x93\xd9\x2c\x00\x00\xd4\xff\x68\x5a\xec\xb4\xaa\x40\xb5\x22\xa1\x2a\xcb\x55\xf4\x6e\xd9\xab\x85\x67\x5b\xd6\xac\x1b\x59\x9e\x5f\x95\xbd\xf6\x4f\x9d\x0d\x9b\x54\xcf\xb6\x2c\xc9\x67\x0a\x85\xf1\x5d\xf9\x76\x51\x32\x46\x9f\xd8\x60\x31\xdc\xc9\x37\xc7\xbd\x1a\xa3\x61\x0a\x42\xde\xe5\xfd\x6b\x18\x61\x88\x01\x0d\x35\x64\x74\x9e\x15\x23\x2f\x1f\x01\x33\xe8\x9f\x57\x68\x64\x54\x75\x5d\x53\xc6\xf4\xfa\x8e\x7d\x40\x16\xc2\xa8\x2a\x68\xf4\x3a\xe2\x80\x30\xbe\x26\x62\xcc\x2e\x1f\x77\xca\xfe\xdc\xee\xf5\x69\xe0\xc2\xfc\xc0\xe6\x88\x9c\x2b\x3f\xd9\xbf\x1f\xcd\x67\xba\x80\x87\x96\x22\x50\x04\x0d\x37\xde\xbc\x20\x03\x75\xda\x22\x30\x36\xc8\xe8\x0c\xc2\x09\x39\xb3\x4e\x35\x39\x0b\xd2\x22\x88\xb6\xa7\x63\xd2\xe3\x0f\xab\x28\x4c\xce\x1e\x4f\x3b\x72\xb7\xe8\xac\xb4\xaa\x82\xcb\x69\xb4\xdd\x53\xca\x78\xd7\x90\xfd\xbb\xf5\x9e\x4f\xdc\xff\xf7\x29\x43\x44\x27\x20\x7e\xe7\x73\xea\xe8\x20\x96\x77\x80\xef\x68\xd2\xbc\xaf\x6f\x29\x0e\x7a\x9b\xa6\xbf\xf4\x27\x9c\x70\x9f\x69\xd1\x3f\xb7\x8b\xaf\x00\x00\x00\xff\xff\xb4\xf2\x3b\x48\xad\x02\x00\x00")

func resourceSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourceSchemaJson,
		"resource.schema.json",
	)
}

func resourceSchemaJson() (*asset, error) {
	bytes, err := resourceSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource.schema.json", size: 685, mode: os.FileMode(436), modTime: time.Unix(1535202505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesGcpProjectSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xdb\x38\x10\xbd\xe7\x57\xcc\x6a\x17\x70\xb2\x6b\x59\xce\xc7\xf6\xc3\x97\x20\x6d\x80\xc2\x40\x0a\xf8\xd0\x53\x5d\x1f\x68\x71\x24\x31\xa5\x48\x86\xa4\xda\x3a\x81\xff\x7b\x41\x49\x76\x25\x59\xaa\x94\xa4\x28\xd0\x8b\x02\x0e\x67\x1e\xf9\xe6\x3d\x4e\xfc\x70\x04\x00\xe0\xfd\x63\xc2\x04\x53\xe2\xcd\xc0\x4b\xac\x55\xb3\x20\xb8\x35\x52\xf8\x45\x74\x22\x75\x1c\x50\x4d\x22\xeb\x4f\x5f\x06\x45\xec\x6f\x6f\x5c\x56\x32\x5a\xa9\x8a\x99\xbd\xcf\xd4\x24\x94\x69\xf0\xe5\x34\xd0\x68\x64\xa6\x43\x34\x41\x1c\xaa\x40\x69\x79\x8b\xa1\x9d\x94\xa0\xee\x80\x1d\x08\x45\x13\x6a\xa6\x2c\x93\xc2\x81\xbd\x93\x32\xe6\x08\x6f\xb9\xcc\x28\x2c\x38\xb1\x91\xd4\x29\x94\xf5\xb0\x43\x05\xa3\x30\x64\x11\x0b\x89\xab\x9b\xec\xb0\xec\x46\xa1\x03\x91\x6b\x97\xbd\x8b\x12\x4a\x99\x4b\x23\x7c\xa1\xa5\x42\x6d\x19\x1a\x6f\x06\x11\xe1\x06\xcb\x14\x8d\x77\x19\xd3\xe8\xe8\x2c\xf3\x48\x1e\x65\xb4\x84\xc8\x57\x82\xa4\xe8\xe5\xcb\x55\x59\xa5\xaa\x70\x0f\xb5\xba\xea\xba\x8d\xe6\x87\x04\x21\x13\xec\x2e\xc3\x31\x64\x06\xb5\x4f\x8c\x61\xb1\x40\x0a\xf3\x6b\x90\x11\xd8\x04\x77\xa4\x27\x95\x4b\xd4\x58\x1a\xab\x99\x88\x9b\xbb\x29\x13\x37\x28\x62\x9b\x78\x33\x78\xd1\xdc\x23\xdf\xf6\x7b\xe7\xd3\xc6\xa6\x22\xd6\xa2\xce\x6f\xb7\x24\xfe\xfd\xca\x7d\xa6\xfe\x6b\x7f\xf5\x70\x31\x3e\x7b\xb5\x2d\x97\x2b\x6f\x5f\xb5\x6d\x36\x67\x10\xe9\x1a\x59\xca\x8c\xe2\x64\x03\xae\xfc\xd7\xd1\xbe\x78\x06\xed\x2b\xff\xa3\x23\x3d\xfa\xe4\xc1\x5f\x8e\xf9\xf9\x74\xdb\xce\x98\x93\x35\x72\x33\x88\x73\x91\x0a\xc4\x18\x19\x32\x62\x91\xc2\x57\x66\x13\xb0\x09\x33\xbd\x6c\x6b\x56\xde\xef\xf6\x5b\xba\x4a\xbe\x96\x73\xf6\x7f\xd3\x15\x1d\x36\x6e\x76\x68\xf1\xf3\xb4\x3c\x35\x37\xce\xf1\xd2\x2f\xbd\xf2\xef\xce\x34\x27\x97\x9d\x35\xd0\xab\x6d\x97\x5c\xc7\xdd\xa7\x9d\x5c\x7a\xad\x10\xdb\x83\x68\x3d\xb2\x6d\x95\x7a\xcd\x38\x67\x22\xbe\x0a\x43\x99\x09\xdb\x2b\xf9\x9b\x22\x1d\x48\x91\x5f\x35\x35\x98\x44\x66\x9c\xc2\x1a\x81\x33\xf1\x19\x29\x58\xf9\x48\xa3\x57\x1a\x50\xbf\x97\x09\x96\x7e\xe1\xde\xd5\x7f\xed\x96\x55\x44\xe3\x80\xfb\x3b\xcb\x16\xa9\x10\x49\x4e\x51\x07\x52\xc7\x44\xb0\xfb\x7c\xd8\x0e\x7d\xa6\xcf\x36\x6e\x75\x26\x17\xa8\x63\x37\x59\x57\x8f\x74\x6f\x79\x9f\x0e\xc3\x36\xa9\x6f\x54\x3e\x87\x4a\xfa\x56\xfe\x78\xb4\x35\x19\xdd\xfb\x9d\xc0\xfb\xcc\x58\x27\xe5\xa8\xda\x9f\x11\x48\x0d\xa3\xa2\x71\xa3\x66\x77\x86\x69\xbc\xcf\x42\x91\xa5\x39\xfd\xea\x01\xde\xd8\x2b\xd0\xbd\xd5\xa1\x9b\x0f\x81\xda\xfe\x1b\x75\xd1\x5f\x74\xab\x3e\xbf\x7e\x26\x97\xea\x80\x3e\x7d\xd2\x33\x24\x8a\xf5\xcf\xdb\x1b\x66\xac\x53\xf0\x6a\x31\x37\x4e\x3f\x14\x64\xcd\x31\xa0\xcc\xb8\xbf\x10\x49\xfd\x7b\xdc\xdb\x67\xcb\xe2\x5e\xc3\xa5\x69\xe7\xd5\xc7\xe7\x80\x17\xd1\x9a\x6c\xba\x92\x98\xc5\xb4\x7b\xb8\xc3\xe3\x06\x75\xf1\xeb\x66\x5e\x42\x5a\x9d\xe1\xd0\x89\xdc\xe2\xe1\x52\xbe\xa7\xb7\x6b\xa0\xfe\x07\x3c\xff\x84\x7e\x75\x3d\x9d\xa3\xe2\xbb\x3d\xfa\x1e\x00\x00\xff\xff\x33\xb5\x6e\x2a\xe9\x0b\x00\x00")

func resourcesGcpProjectSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesGcpProjectSchemaJson,
		"resources/gcp/project.schema.json",
	)
}

func resourcesGcpProjectSchemaJson() (*asset, error) {
	bytes, err := resourcesGcpProjectSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/gcp/project.schema.json", size: 3049, mode: os.FileMode(436), modTime: time.Unix(1535202880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _protocolInitRequestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x6e\xf2\x30\x14\x85\xf7\x3c\x85\xe5\xff\x97\x18\x8a\x63\x98\xaa\x66\xeb\x58\xa9\x43\xd5\xb1\x28\x83\x1b\x5f\x82\x11\xb1\x5d\xfb\x52\xa9\xa0\xbc\x7b\x65\xe2\x98\x04\x82\x18\xba\xc5\xe7\xe4\x7c\xf7\xf8\x26\xc7\x8c\x10\x42\xe8\x7f\x5f\x6d\xa0\x11\xb4\x20\x74\x83\x68\x0b\xce\xb7\xde\x68\xd6\xa9\xb9\x71\x35\x97\x4e\xac\x91\x2d\x1e\x79\xa7\xfd\xa3\xf3\x98\x54\x72\x90\xaa\x15\x1e\xf6\x36\xaf\x4c\xc3\xbf\x97\xdc\x3a\x83\xa6\x32\x3b\xae\xb4\xc2\xdc\xc1\xd7\x1e\x3c\xe6\x11\x1a\x06\xf4\x10\x09\xbe\x72\xca\xa2\x32\x3a\xc0\xde\xc1\x9b\xbd\xab\x80\xf4\x00\x32\x0b\x84\x19\xe9\x11\x7d\x0e\x7f\x2c\x84\x80\xf9\xdc\x42\x85\xbd\x2a\xa4\x54\x01\x25\x76\x6f\xce\x58\x70\xa8\xc0\xd3\x82\xac\xc5\xce\x43\x7c\x25\x80\x94\x83\x50\x7d\x75\x52\x92\x0a\x1e\x5f\x24\x9d\x87\x43\x57\x82\x9e\xfc\x32\x06\xed\x90\x78\x9c\x8a\x0e\xe5\x51\x49\x8f\x4e\xe9\x3a\x96\x4c\x6e\xa3\xf4\x2b\xe8\x1a\x37\xb4\x20\xcb\x64\xb5\xf3\x21\x3a\x16\xb9\x49\x1e\x5d\x3f\xb9\xf7\xd7\x30\x6a\x7f\xb5\x8e\xe4\x6a\xd1\xc0\x05\xfc\x3c\x7e\x24\x97\x17\xdc\x1b\xdb\x1a\x93\xa7\x9c\xfb\x8b\x3b\xcf\x10\x88\xe0\x4e\xff\xcd\x4a\xb0\x43\xb9\x62\x82\x1d\x9e\xd9\xc7\x82\x3d\x95\x0f\xf4\x2a\xd3\xde\xba\xc8\x1f\x6b\x4c\x7f\xc7\x34\x35\x9b\x3e\x75\x4f\x6d\xd6\x66\xbf\x01\x00\x00\xff\xff\xb6\x9b\x7c\x82\x89\x03\x00\x00")

func protocolInitRequestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_protocolInitRequestSchemaJson,
		"protocol/init.request.schema.json",
	)
}

func protocolInitRequestSchemaJson() (*asset, error) {
	bytes, err := protocolInitRequestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "protocol/init.request.schema.json", size: 905, mode: os.FileMode(436), modTime: time.Unix(1535479929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _protocolInitResponseSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x4a\x03\x41\x0c\x86\xef\xfb\x14\x61\x14\x7a\xb1\x3b\x7a\x12\xf6\x29\xc4\xab\x78\x18\x67\xd2\x36\x65\xbb\x89\x49\x56\xd0\xd2\x77\x97\xa1\x33\xa5\xd7\x8f\xff\xfb\x92\xf3\x00\x00\x10\x1e\x2d\x1f\xf0\x94\xc2\x04\xe1\xe0\x2e\x53\x8c\x47\xe3\x65\x7b\xa5\x23\xeb\x3e\x16\x4d\x3b\xdf\x3e\xbf\xc6\x2b\x7b\x08\x4f\xcd\xa4\x72\x67\xed\xc9\xff\x56\x19\x33\x9f\xe2\xcf\x4b\x14\x65\xe7\xcc\x73\xa4\x85\x7c\x54\x34\xe1\xc5\x70\x6c\xd5\x7a\xa1\x57\x0a\x5a\x56\x12\x27\x5e\x6a\xed\x1d\x8d\x57\xcd\x08\xbd\x00\x9b\x9a\xd8\xc0\xad\xd1\x45\xff\x15\xac\x06\x7f\x1d\x31\x7b\xa7\xa9\x14\xaa\xad\x34\xbf\x29\x0b\xaa\x13\x5a\x98\x60\x97\x66\xc3\x36\x51\xfc\x5e\x49\xb1\x3e\xff\x01\x9f\x0d\xca\xfd\xfa\x0c\x97\xe1\x32\xfc\x07\x00\x00\xff\xff\x76\x1f\x99\x9d\x21\x01\x00\x00")

func protocolInitResponseSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_protocolInitResponseSchemaJson,
		"protocol/init.response.schema.json",
	)
}

func protocolInitResponseSchemaJson() (*asset, error) {
	bytes, err := protocolInitResponseSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "protocol/init.response.schema.json", size: 289, mode: os.FileMode(436), modTime: time.Unix(1535207693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"build-request.schema.json":          buildRequestSchemaJson,
	"resource.schema.json":               resourceSchemaJson,
	"resources/gcp/project.schema.json":  resourcesGcpProjectSchemaJson,
	"protocol/init.request.schema.json":  protocolInitRequestSchemaJson,
	"protocol/init.response.schema.json": protocolInitResponseSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"build-request.schema.json": &bintree{buildRequestSchemaJson, map[string]*bintree{}},
	"protocol": &bintree{nil, map[string]*bintree{
		"init.request.schema.json":  &bintree{protocolInitRequestSchemaJson, map[string]*bintree{}},
		"init.response.schema.json": &bintree{protocolInitResponseSchemaJson, map[string]*bintree{}},
	}},
	"resource.schema.json": &bintree{resourceSchemaJson, map[string]*bintree{}},
	"resources": &bintree{nil, map[string]*bintree{
		"gcp": &bintree{nil, map[string]*bintree{
			"project.schema.json": &bintree{resourcesGcpProjectSchemaJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
