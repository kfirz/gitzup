// Code generated by go-bindata. DO NOT EDIT. @generated
// sources:
// api/build-request.schema.json
// api/resource.schema.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _buildRequestSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x4e\xc3\x30\x10\x84\xef\x79\x8a\x95\xe1\x88\xe3\x72\x42\xe4\xd6\x37\xe0\x4c\x15\xa1\xd4\xd9\xb6\xae\x68\x6c\xd6\x1b\x24\x5a\xe5\xdd\x91\xff\xaa\x22\xdc\x4b\x94\xfd\x76\x66\xd6\x9a\x4b\x03\x00\x20\x1e\xbd\x3e\xe0\x69\x10\x1d\x88\x03\xb3\xeb\x94\x3a\x7a\x3b\xc9\x44\x5b\x4b\x7b\x35\xd2\xb0\x63\xb9\x7a\x51\x89\x3d\x88\xa7\xec\x34\xe3\x8d\x6b\x6f\xf8\x3c\xbb\x56\xdb\x93\xfa\x7e\x56\xdb\xd9\x7c\x8e\x92\xf0\x6b\x46\xcf\x6d\x0e\x0b\xc1\xc5\x3c\xa2\xd7\x64\x1c\x1b\x3b\x85\x90\x35\x44\x07\x14\x47\x91\xf1\x8f\xc3\xb0\xb7\xdb\x23\x6a\x2e\x34\xa8\x0c\x61\x38\xbf\x89\x24\x53\x6f\x67\xd2\xe8\x45\x64\x7d\x16\x3b\xb2\x0e\x89\x0d\x7a\xd1\xc1\xa5\x26\xbf\xc5\xf7\xaf\x5e\xb7\x6e\x60\x46\x9a\xde\xea\xb9\x57\xd9\x66\x90\xe7\x3e\x7c\xd6\xf2\x7d\x25\x5f\x3f\x64\x1c\xfa\xaa\x38\xf5\x49\xb8\xbb\x5b\x68\x79\xed\x9f\x2e\xff\xe5\x2c\x4d\x7d\x4a\x7f\x4b\xb3\x34\xbf\x01\x00\x00\xff\xff\x22\xb3\x26\x8c\xf6\x01\x00\x00")

func buildRequestSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_buildRequestSchemaJson,
		"build-request.schema.json",
	)
}

func buildRequestSchemaJson() (*asset, error) {
	bytes, err := buildRequestSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "build-request.schema.json", size: 502, mode: os.FileMode(436), modTime: time.Unix(1535142633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourceSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x4f\xfb\x30\x10\xc5\xf7\x7e\x8a\x93\xff\xff\x01\x24\x9a\x80\x18\x90\xb2\x21\x31\x32\x21\x36\xc4\x10\x2e\x17\xe7\x0a\xb1\xcd\xf9\x8c\x80\xaa\xdf\x1d\xb9\x89\xdb\x52\x18\x58\x22\xe5\xdd\xef\x5d\xde\xcb\xad\x17\x00\x00\xe6\x7f\xc4\x81\xc6\xd6\x34\x60\x06\xd5\xd0\xd4\xf5\x2a\x7a\xb7\x9c\xd4\xca\x8b\xad\x3b\x69\x7b\x5d\x9e\x5f\xd5\x93\xf6\xcf\x9c\xcd\x4e\xee\x0e\x5c\x96\xf5\x33\x85\x0a\xfd\x58\xbf\x5d\xd4\x42\xd1\x27\x41\xaa\xe6\x3d\x79\x67\xf1\x75\x14\x51\x38\x28\x7b\x97\xfd\xd7\x50\x60\x88\x81\x90\x7b\xc6\x36\xcf\xaa\xc2\xeb\x47\xa0\x0c\xfa\xa7\x15\xa1\x16\x55\xe8\x35\xb1\x50\x8e\xf0\xb0\x55\xf6\xec\xf6\xf5\x71\xe6\x82\xf8\x40\xa2\x4c\xd1\x34\xb0\x3e\x22\x0f\x95\xdf\xb2\xdd\x95\x64\x99\xae\xe0\x7e\xe0\x08\x1c\xa1\x85\x1b\x8f\xcf\x24\xc0\x63\x6b\x09\x84\x7a\x12\x72\x48\x70\xc2\x0e\x5f\x52\xc7\xce\x82\x0e\x04\xda\xda\xd3\x52\xe3\xf8\xc3\x26\xaa\xb0\xb3\xc7\xd3\x91\xdd\x2d\x39\xab\x83\x69\xe0\x72\x37\xda\xec\x29\x83\xde\xf5\x6c\xff\x1e\x7d\xe2\x93\x4c\x3f\x75\xd7\x21\x92\x53\x50\xbf\xcd\xb9\x3b\xc0\xb7\x5a\xde\x01\xbd\x13\xa6\xc3\x63\xfc\x68\x31\x1f\x65\x9f\x74\x31\x3d\x37\x8b\xaf\x00\x00\x00\xff\xff\xe8\xfa\xe2\x50\x60\x02\x00\x00")

func resourceSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourceSchemaJson,
		"resource.schema.json",
	)
}

func resourceSchemaJson() (*asset, error) {
	bytes, err := resourceSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resource.schema.json", size: 608, mode: os.FileMode(436), modTime: time.Unix(1535111580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"build-request.schema.json": buildRequestSchemaJson,
	"resource.schema.json":      resourceSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"build-request.schema.json": &bintree{buildRequestSchemaJson, map[string]*bintree{}},
	"resource.schema.json":      &bintree{resourceSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
