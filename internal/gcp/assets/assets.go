// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/gcp/assets/project.config.json (2.535kB)
// internal/gcp/assets/schemas.go (273B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalGcpAssetsProjectConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\xcc\x6a\x17\x70\xb2\x1b\x59\xce\xc7\xf6\xc3\x97\x20\x6d\x80\xc2\x40\x0a\xf8\xd0\x53\x5d\x1f\x68\x71\x2c\x31\xa5\x49\x86\xa4\xda\x3a\x81\xff\x7b\x41\x51\x8e\x48\xc7\xb6\x9a\x16\x45\x0f\xb6\xa5\xd1\x9b\xd1\xbc\x79\x8f\xe3\x87\x1e\x40\xf2\x8f\xc9\x4b\x5c\x92\x64\x04\x49\x69\xad\x1a\x65\xd9\xad\x91\x22\xf5\xd1\x81\xd4\x45\x46\x35\x59\xd8\x74\xf8\x32\xf3\xb1\xbf\x93\x93\x3a\x8f\xd1\x20\xa7\x60\xf6\xbe\x52\x83\x5c\x2e\x1b\x54\xf6\xe5\x34\x2b\x72\x95\x29\x2d\x6f\x31\xb7\x03\x57\xd4\x27\x52\x34\xb9\x66\xca\x32\x29\x5c\x81\x77\x52\x16\x1c\xe1\x2d\x97\x15\x85\x09\x27\x76\x21\xf5\x12\x9a\x34\xd0\x68\x64\xa5\x73\x04\xa3\x30\x67\x0b\x96\x13\x97\x37\xf0\x95\xec\x4a\xa1\x2b\x21\xe7\x0e\xeb\x63\x84\x52\xe6\x20\x84\x4f\xb4\x54\xa8\x2d\x43\x93\x8c\x60\x41\xb8\xc1\x1a\xa0\xf1\xae\x62\x1a\x5d\xf3\xd3\x1e\x00\x40\xc2\x68\x9d\x0a\x90\x08\xb2\xc4\xa4\x07\x30\xab\x91\x2a\x2c\xf0\xf0\x88\xdd\x5c\x3f\xa5\xf2\xa1\x44\xa8\x04\xbb\xab\xf0\x04\x2a\x83\x3a\x25\xc6\xb0\x42\x20\x85\xf1\x35\xc8\x05\xd8\x12\x37\xc4\x06\xcd\x2b\x03\x16\xc6\x6a\x26\x8a\x36\xbe\x64\xe2\x06\x45\x61\xcb\x64\x04\x2f\xda\x28\xf9\xf6\x18\x3d\x1f\x3e\x86\x15\xb1\x16\x75\xdd\xc5\x94\xa4\xf7\x33\xf7\x35\x4c\x5f\xa7\xb3\x87\x8b\x93\xb3\x57\xeb\xe6\x76\x96\xd4\xf8\x75\x48\xb7\x83\x4e\x44\x83\x32\xa3\x38\x59\x81\x4b\xfc\x35\x42\x17\xcf\x24\x74\x95\x7e\x74\x74\xfa\x9f\x12\xf8\xcb\x71\x3a\x1f\xae\x63\x2e\x9c\xcc\x91\x9b\x0e\x36\x1e\x04\xc4\x18\x99\x33\x62\x91\xc2\x57\x66\x4b\xb0\x25\x33\x07\x78\x04\xf6\xaa\xe3\x5d\x16\xdb\xd0\x8a\x9e\x9e\xfd\xdf\x6a\xb8\xc3\x58\x21\xe7\xc9\xee\xc7\xd0\x48\x7b\x34\x4d\x1b\x35\xff\xdd\xc8\x7a\x7c\xb9\x85\xdc\xaf\xc2\xd3\xf1\x1e\xed\xaf\x7a\x7c\x99\x04\x69\xeb\xde\xf6\xd5\x3a\x92\x60\xce\x38\x67\xa2\xb8\xca\x73\x59\x09\x7b\x40\x8a\x37\x1e\x08\xc4\x23\x43\x1b\x81\x29\x65\xc5\x29\xcc\x11\x38\x13\x9f\x91\x82\x95\x3f\x60\xad\x80\x4e\xdc\x85\xc9\xa6\xa9\xf7\xce\xec\xbf\xd8\x30\x8a\x68\x3c\xd8\xa5\x33\x8c\x07\xc1\x42\x72\x8a\x3a\x93\xba\x20\x82\xdd\xd7\x2b\xa8\xdb\xfe\x3f\x65\x9b\x27\xdb\xa9\x2d\xd9\x2a\xe8\xb6\x50\x73\x33\xeb\x34\x55\xd3\x4e\xe4\xa3\x6d\xa6\x2b\x55\x1f\xe7\x86\xad\x95\xed\x09\x89\xb4\x71\x87\x65\x00\xef\x2b\x63\x9d\x3e\xfd\x70\x1c\x7d\x90\x1a\xfa\x7e\x4e\xfd\x41\xe4\xb6\x43\x4e\x4c\x50\x54\xcb\x88\x6b\x1d\x0d\x2b\x6f\x3b\xd7\xbf\x23\xf4\xe5\xac\xf5\x65\x3c\xa3\xc3\xac\x27\xfb\xb5\x1d\x5f\x3f\x83\x42\xb8\xd6\x4e\x3b\x8e\x08\x51\xec\xd0\x8e\xba\x61\xc6\x3a\x21\xae\x26\x63\xe3\x64\x40\x41\xe6\x1c\x33\xca\x8c\xfb\x85\x85\xd4\xbf\xc3\x73\xfb\x9c\xe3\xdf\xde\x35\xc6\xdd\x3d\xef\xef\x35\xea\x97\x68\x4d\x56\xf1\x23\x66\x71\xb9\xbd\xf8\x3a\xd7\x99\xff\xd7\x1d\x37\xa9\x56\x57\xb8\x7b\x6f\x05\xfe\x68\x86\xfa\x5c\x7a\x9d\x5a\xfc\x51\x7e\xb1\xe9\x7a\xee\xb3\xee\x7d\x0f\x00\x00\xff\xff\xc0\x5a\xf1\xe7\xe7\x09\x00\x00")

func internalGcpAssetsProjectConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalGcpAssetsProjectConfigJson,
		"internal/gcp/assets/project.config.json",
	)
}

func internalGcpAssetsProjectConfigJson() (*asset, error) {
	bytes, err := internalGcpAssetsProjectConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/gcp/assets/project.config.json", size: 2535, mode: os.FileMode(420), modTime: time.Unix(1543071571, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xa8, 0x98, 0x12, 0x1d, 0x64, 0xcd, 0x3, 0x1d, 0x8e, 0xa, 0xf4, 0x62, 0x47, 0xd3, 0xf6, 0xd4, 0x48, 0xd8, 0xe8, 0x41, 0x97, 0xa3, 0xfc, 0x38, 0xe9, 0x85, 0x32, 0xd5, 0xb3, 0x7e, 0x96}}
	return a, nil
}

var _internalGcpAssetsSchemasGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x6e\xc4\x20\x0c\x80\xe1\xb9\x7e\x0a\x8b\x29\xe9\x00\x4f\xd0\xa1\xea\xd0\xa5\x43\xa5\x3e\x01\x75\x09\x21\x29\x18\x81\xe9\x90\xea\xde\xfd\xa4\x10\x9d\xee\x74\xc7\x88\xad\xef\x77\xb6\xb4\x5a\xef\xd0\xd6\xea\xa4\x02\x84\x98\xb9\x08\x0e\xf0\x44\x1c\x23\xa7\xd7\xfd\x1f\x95\x0f\x32\xb7\x6f\x4d\x1c\xcd\x3a\x85\xb2\x19\x1f\x64\x6b\xd9\x84\x24\xae\x24\xfb\x6b\xfa\xba\xe9\x8e\x82\x11\xe0\xcf\x16\xcc\x85\x17\x47\xf2\xc6\x69\x0a\xfe\x8b\x66\x17\x2d\xbe\xe0\x35\xad\x3f\xd8\xfe\xf4\xc9\xa0\x2e\x9a\xa7\x7c\x50\xe6\x20\x34\xed\x86\x5e\x2a\x27\x35\x02\x4c\x2d\x11\xbe\x3b\xf9\xbc\x2f\x0c\x23\x3e\xdf\x24\x8e\x70\x7f\xff\x58\x9c\xb4\x92\x1e\xde\x76\x82\x73\x00\x00\x00\xff\xff\x6b\xe9\xde\xd1\x11\x01\x00\x00")

func internalGcpAssetsSchemasGoBytes() ([]byte, error) {
	return bindataRead(
		_internalGcpAssetsSchemasGo,
		"internal/gcp/assets/schemas.go",
	)
}

func internalGcpAssetsSchemasGo() (*asset, error) {
	bytes, err := internalGcpAssetsSchemasGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/gcp/assets/schemas.go", size: 273, mode: os.FileMode(420), modTime: time.Unix(1543079164, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x9, 0x77, 0xd, 0x5e, 0xc, 0x2d, 0x53, 0x73, 0xdd, 0xd7, 0x6b, 0x13, 0x4e, 0x9, 0xc2, 0x54, 0x4b, 0xf3, 0xeb, 0xa5, 0xa5, 0xc, 0xfc, 0x1b, 0x4a, 0xf4, 0xa3, 0x8f, 0x69, 0xd6, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/gcp/assets/project.config.json": internalGcpAssetsProjectConfigJson,

	"internal/gcp/assets/schemas.go": internalGcpAssetsSchemasGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"gcp": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"project.config.json": &bintree{internalGcpAssetsProjectConfigJson, map[string]*bintree{}},
				"schemas.go":          &bintree{internalGcpAssetsSchemasGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
