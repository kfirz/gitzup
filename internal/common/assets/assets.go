// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/common/assets/resource.action.json (544B)
// internal/common/assets/resource.init.request.json (726B)
// internal/common/assets/resource.init.response.json (475B)
// internal/common/assets/schemas.go (585B)
// internal/common/assets/support.go (4.301kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalCommonAssetsResourceActionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8e\x41\x4b\x33\x31\x10\x86\xef\xfb\x2b\x86\x7c\x85\x7e\xa2\xdd\xe8\x49\xc8\xa5\x7f\x41\xbc\x96\x16\x62\x32\xdd\xa6\x74\x77\xe2\x64\x2a\xac\x65\xff\xbb\x24\xa9\xb8\xa2\x57\x0f\x81\xe4\xcd\xf3\xbc\x33\x97\x06\x40\x2d\x92\x3b\x60\x6f\x95\x01\x75\x10\x89\x46\xeb\x63\xa2\x61\x55\xd3\x96\xb8\xd3\x9e\xed\x5e\x56\xf7\x8f\xba\x66\xff\xd4\x5d\xf1\x82\x9f\x39\x5d\x90\xf7\x73\x6c\x1d\xf5\x57\x4a\xbf\x3d\x68\xeb\x24\xd0\xd0\xe6\xbe\xea\x78\x4c\x8e\x43\xcc\x69\x76\x9f\x31\xd1\x99\x1d\x42\x64\x12\x72\x74\x82\x65\x55\x96\x6d\xe5\x65\x8c\x98\x41\x7a\x39\xa2\x93\x9a\x59\xef\x43\x66\xec\xe9\x89\x29\x22\x4b\xc0\xa4\x0c\xec\xed\x29\x61\x01\x18\x5f\xcf\x81\x31\x6f\xb7\x69\x00\x00\x54\xe8\x6d\x87\xaa\x01\xd8\x16\x20\xce\xbd\xcb\x1c\xf9\x7c\xce\x46\x27\xe1\x30\x74\x65\x74\xc9\xa3\x15\x41\x2e\xeb\xef\x36\x3b\xb3\xbd\xfd\xbf\x36\xa6\x5c\x6e\xd6\x0b\x55\xa8\xa9\xc2\x0a\x07\xe1\x31\x52\x18\xe4\xb7\x62\xcb\x6c\xc7\xaf\xde\x20\xd8\xa7\x19\xf7\x73\x85\xeb\xc7\xf4\x6d\x86\xeb\xfd\x1f\x94\x37\xf9\x4c\xcd\x47\x00\x00\x00\xff\xff\xba\x5e\xe1\x1a\x20\x02\x00\x00")

func internalCommonAssetsResourceActionJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalCommonAssetsResourceActionJson,
		"internal/common/assets/resource.action.json",
	)
}

func internalCommonAssetsResourceActionJson() (*asset, error) {
	bytes, err := internalCommonAssetsResourceActionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/common/assets/resource.action.json", size: 544, mode: os.FileMode(420), modTime: time.Unix(1543071582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x5a, 0xd4, 0x77, 0xd4, 0x25, 0x6a, 0x99, 0xd4, 0xfe, 0x42, 0x2d, 0xb0, 0xb0, 0xa1, 0x50, 0xd0, 0x8e, 0xda, 0x73, 0x43, 0x19, 0x44, 0x58, 0x2a, 0xb7, 0x18, 0xb6, 0x62, 0x9e, 0x23, 0x4b}}
	return a, nil
}

var _internalCommonAssetsResourceInitRequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x31\x4f\xf3\x30\x10\x86\xf7\xfc\x8a\x93\xbf\x4f\xea\x00\x4e\xda\x09\x91\x8d\x11\x89\x01\x31\x52\x65\x30\xf1\x35\x75\xd5\xd8\xc6\xbe\x22\xd1\x2a\xff\x1d\xd9\x4e\x83\x09\x45\x88\xa5\x55\x5e\xdd\xf3\xdc\xbd\xc9\xa9\x00\x60\xff\x7d\xbb\xc5\x5e\xb0\x1a\xd8\x96\xc8\xd6\x55\xb5\xf3\x46\xf3\x94\x96\xc6\x75\x95\x74\x62\x43\x7c\x79\x53\xa5\xec\x1f\xbb\x8e\x9c\x92\x19\xd3\x29\x3a\x1e\x6c\xd9\x9a\x7e\x9c\xaa\xde\x56\x95\xd2\x8a\x4a\x87\xaf\x07\xf4\x54\x06\x6b\x22\x25\xfa\xd6\x29\x4b\xca\xe8\x60\x78\x42\x6f\x0e\xae\x45\xb0\xce\x90\x69\xcd\x1e\x16\x01\x5c\xc0\x99\x4c\x14\xbd\x5b\x0c\xe3\xe6\x65\x87\x2d\xa5\x4c\x48\xa9\x82\x46\xec\x1f\x9d\xb1\xe8\x48\xa1\x67\x35\x6c\xc4\xde\x63\x1c\x08\x0a\xe5\x30\x5c\xba\x2e\x00\xc6\x04\x3d\xdd\xcb\x68\x88\x41\x5a\xcf\x0a\x80\x26\x42\x36\x77\x9d\xe6\xd8\x39\xca\x4e\xf2\xe4\x94\xee\x46\x21\x00\xeb\x95\x7e\x40\xdd\xd1\x96\xd5\xb0\x8a\xe1\x30\x5f\x76\xc1\x92\x15\x8b\xf9\x6f\xe5\xa6\xbb\xbe\x14\x8c\xa9\x16\x3d\x4e\xa2\xf3\x8a\xf1\xb1\x99\xd8\x0b\x3d\x3f\xe9\x3c\xf9\xb9\x6a\xf2\x08\x22\x74\xf1\x5b\xae\x05\x3f\x36\x6b\x2e\xf8\xf1\x8e\x3f\x2f\xf9\x6d\x73\xc5\xa6\xc9\x61\x7e\xd0\x1f\x56\x7c\x7f\xa3\xd1\x58\xe4\xff\xe1\x77\x28\x86\xe2\x23\x00\x00\xff\xff\xe5\x64\x55\xfc\xd6\x02\x00\x00")

func internalCommonAssetsResourceInitRequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalCommonAssetsResourceInitRequestJson,
		"internal/common/assets/resource.init.request.json",
	)
}

func internalCommonAssetsResourceInitRequestJson() (*asset, error) {
	bytes, err := internalCommonAssetsResourceInitRequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/common/assets/resource.init.request.json", size: 726, mode: os.FileMode(420), modTime: time.Unix(1543071582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xd6, 0x29, 0x2c, 0xb3, 0x9b, 0x0, 0x41, 0x1e, 0x3, 0xb9, 0x10, 0x9c, 0xd9, 0x4d, 0x73, 0x35, 0xc2, 0x59, 0x27, 0xa4, 0x11, 0x69, 0x20, 0xe6, 0x5f, 0x8e, 0x75, 0xe4, 0x10, 0x15, 0x4c}}
	return a, nil
}

var _internalCommonAssetsResourceInitResponseJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\xc9\x20\x75\x69\x63\x98\x90\xb2\xf1\x06\x08\x46\xc4\x60\xec\x4b\x7a\x55\xea\x33\xe7\x0b\x12\x54\x7d\x77\x64\x1b\x50\x87\x20\x31\x64\xf9\xf5\x7f\x5f\xce\xff\xa9\x03\x30\xd7\xd9\xef\xf1\xe8\xcc\x00\x66\xaf\x9a\x06\x6b\x0f\x99\xe3\xae\xa5\x3d\xcb\x64\x83\xb8\x51\x77\x37\x77\xb6\x65\x57\x66\x5b\x39\x0a\x17\xcc\x44\xfa\xb9\xa4\xde\xf3\xf1\xbb\x65\xdf\x6f\x2d\x45\xd2\x5e\x30\x27\x8e\x19\xfb\xa2\x6d\x68\xc0\xec\x85\x92\x12\xc7\xa2\x78\xc4\xcc\x8b\x78\x84\x24\xac\xec\x79\x86\x4d\x21\x37\xf0\x8b\x36\x4c\x3f\x12\x96\x3e\xbf\x1e\xd0\x6b\xcb\x5c\x08\x54\x3c\x6e\x7e\x10\x4e\x28\x4a\x98\xcd\x00\xa3\x9b\x33\xd6\x82\xe0\xdb\x42\x82\xe5\xd6\xe7\x0e\x00\xc0\x78\x8e\x23\x4d\x4f\xed\xd5\xdb\x96\x65\x75\x8a\xf7\xbe\x5e\xd4\x01\xbc\x54\x34\x5d\x1a\x4f\x2b\xf0\x4f\x5a\xd6\x10\x1c\xff\x3f\xa1\xa9\xd8\x79\xe5\xe7\x7f\x2b\x57\x17\x76\x95\x6a\xd3\x36\x67\x57\xbe\x73\xf7\x15\x00\x00\xff\xff\x13\x22\xfc\x33\xdb\x01\x00\x00")

func internalCommonAssetsResourceInitResponseJsonBytes() ([]byte, error) {
	return bindataRead(
		_internalCommonAssetsResourceInitResponseJson,
		"internal/common/assets/resource.init.response.json",
	)
}

func internalCommonAssetsResourceInitResponseJson() (*asset, error) {
	bytes, err := internalCommonAssetsResourceInitResponseJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/common/assets/resource.init.response.json", size: 475, mode: os.FileMode(420), modTime: time.Unix(1543071582, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x30, 0x81, 0x40, 0x2b, 0x25, 0xe4, 0x5d, 0xd7, 0x61, 0x61, 0xe8, 0xa8, 0x1a, 0x2b, 0xb0, 0x75, 0x7b, 0xb2, 0x3, 0xd, 0xd5, 0x15, 0x72, 0x7f, 0x99, 0x6a, 0x4a, 0xb6, 0xe5, 0xa7, 0x2c}}
	return a, nil
}

var _internalCommonAssetsSchemasGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd0\x31\xae\xc2\x30\x0c\x80\xe1\x3d\xa7\xb0\x3a\xb5\x4f\x4f\xed\x09\xde\xf0\x26\x84\xc4\x04\x27\xb0\x82\x81\x00\x75\x4a\xec\xb0\xa0\xde\x1d\x41\x40\x6a\x15\x3a\x00\xdd\x3a\xf8\xb3\xf3\x77\x68\x0f\xb8\x25\x40\x11\x52\x31\xe6\x8c\x01\x02\x89\x8f\xc1\xd2\xbf\x55\xe7\x79\x65\x77\xd4\x22\xfc\xc1\xc2\xe3\x3a\xfd\x94\x85\x63\xa5\xc0\x78\x6c\xac\x6f\x5b\xcf\x4d\x1a\x6f\x9e\x93\x35\xde\x47\xeb\xbd\x78\x2e\xaa\x11\x3a\x67\xa7\x4b\x3a\x45\x12\xfd\x48\x76\xec\xb4\x0e\x09\x98\xf6\xa5\xf3\x2c\xf4\xcd\x82\x24\xa4\x0d\xbf\xf0\xe6\x83\xcd\x26\xb2\x85\x19\xdd\x2e\xc9\x52\x96\x15\xfc\x3c\x2e\x4b\xdf\x05\x02\x69\x0c\xfc\x3a\x7c\x9f\x61\x59\xc2\xa1\x98\x61\x79\xf0\x29\x71\x18\x6d\x40\x4e\x88\xa3\xc4\xbd\xb9\x06\x00\x00\xff\xff\x9e\x56\xb2\xb0\x49\x02\x00\x00")

func internalCommonAssetsSchemasGoBytes() ([]byte, error) {
	return bindataRead(
		_internalCommonAssetsSchemasGo,
		"internal/common/assets/schemas.go",
	)
}

func internalCommonAssetsSchemasGo() (*asset, error) {
	bytes, err := internalCommonAssetsSchemasGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/common/assets/schemas.go", size: 585, mode: os.FileMode(420), modTime: time.Unix(1543078992, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x62, 0x84, 0x39, 0x45, 0xa8, 0x43, 0x72, 0xae, 0x5e, 0x35, 0x4a, 0xdc, 0x64, 0x77, 0xc0, 0x7c, 0xbb, 0x99, 0x54, 0xe9, 0x3d, 0x2, 0xca, 0x8b, 0x5e, 0x9e, 0x54, 0x72, 0x0, 0x54, 0x8e}}
	return a, nil
}

var _internalCommonAssetsSupportGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x41\x8f\xdb\x36\x13\x3d\x8b\xbf\x62\x22\x20\x81\xe4\xcf\x2b\xdf\xfd\x75\x0b\x24\x69\x50\xa0\x28\xb6\x45\xdc\xf6\xd2\x14\x05\x2d\x8d\x64\xa6\x12\xa9\x92\x94\x37\xc6\xc2\xff\xbd\x18\x92\xb2\x24\xcb\x9b\x38\x9b\x5c\xda\xbd\xac\x4d\x72\xde\xf0\x0d\x67\xde\x8c\x5b\x9e\xff\xc5\x2b\x04\x6e\x0c\x5a\xc3\x98\x68\x5a\xa5\x2d\x24\x2c\x8a\xb7\x07\x8b\x26\x66\x51\x8c\x32\x57\x85\x90\xd5\xea\xbd\x51\x92\x16\xca\xc6\xc6\x8c\x45\x71\x25\xec\xae\xdb\x66\xb9\x6a\x56\x95\xba\x41\xad\x95\x36\x2b\xff\x2f\x9e\x6e\x7f\x40\xd1\x76\xdd\x7e\x55\x29\xc2\x30\xf9\x0e\x1b\x1e\xb3\x94\xb1\xd5\x0a\x5e\xab\xa6\x15\x35\x16\xf0\xc3\xe6\xa7\x3b\xf0\x7b\x19\xb3\x87\x16\x61\xe3\xbe\x80\xb1\xba\xcb\x2d\x3c\xb0\x88\xac\x7f\x54\xbc\x40\x0d\xfe\x6f\x31\x46\xcc\x08\xc1\x6f\xb3\xa8\x93\x05\xea\xfa\x20\x64\x15\x50\xa6\x47\xfd\x22\x3b\xba\x2b\x6c\x76\x4a\xdb\xbc\xb3\x50\x2a\x0d\xb5\xe2\xc4\x16\xf8\xf8\x42\x4b\xe0\xb2\x80\x96\x4b\x91\xdf\xd0\xa6\x92\xe0\x89\xb2\xb2\x93\x39\x90\x53\x8f\x98\x34\x5c\xc8\xe0\x51\x48\x8b\xba\xe4\x39\x3e\x1c\x97\xc0\x8b\x42\x58\xa1\x24\xaf\xfd\xae\x81\x2c\xcb\x46\x27\x52\x58\x04\xb3\x07\x16\xf5\x4e\x51\x6b\x58\xdf\xc2\x1d\xde\xcf\xd0\x2f\x20\x66\x59\x96\xb2\x48\x94\xce\xec\xd9\x2d\x48\x51\x13\x58\xe4\xae\x9d\xa0\xd6\x29\x8b\x8e\x2c\xd2\x68\x3b\x2d\x03\xb1\x10\x81\xd7\x1a\xb9\x45\x33\x25\xed\x3f\xd7\x2e\xa0\x99\x27\x2a\xf1\x7e\x08\x72\x62\x54\xa7\x73\x84\x09\x8b\xe4\xb1\x27\x59\xfa\x88\xa5\x8e\xdf\xbd\xb0\xf9\x0e\x82\xfd\xfa\x36\x7c\xca\x12\x7a\x76\x77\x22\xe7\x06\xe9\xe1\x85\xac\xd6\x2c\x0a\x01\x79\x45\x29\x79\x8a\xca\x4b\xca\xd9\x70\x87\x94\x45\x17\x88\xf7\x54\xa5\xa8\x9d\x15\x8b\x88\xff\x28\x8b\x4e\x58\x67\xbc\x06\x6f\x9f\x05\x1c\x56\xc7\xf8\x52\xd4\x81\xcc\xe2\x1a\x36\x8b\x7f\x0d\x9d\xdf\xff\x20\x81\x58\x4f\xfc\x93\xeb\xc9\xeb\xdf\xe1\xbd\x73\x3b\xc9\x97\x74\x80\x7e\xf1\x48\xa8\x9e\x02\xbe\xb8\x16\xdd\x57\xcb\x7a\x38\x17\x92\xef\x91\xbb\xcc\x8e\x9f\x3c\xcd\x2d\x0a\x2c\x79\x57\xdb\x4f\x5f\xfc\x7b\x75\x7d\x48\x8e\xa1\x46\x7f\xe6\xda\x20\xbc\x80\xdc\x0b\xe6\x59\xad\x96\x5a\x35\x60\x77\x08\x95\xd8\x63\xcf\xc9\x64\xf0\xcb\x0e\x81\x54\xa3\x3f\x27\x0c\xb4\x5a\xed\x45\x81\x05\x70\xe3\x2c\x4a\xa1\x8d\x05\xae\xab\xae\x41\x69\x97\x60\xb0\xe5\x9a\x5b\x2c\xc8\xab\xc3\xe5\xf2\x30\x92\x9b\x00\x45\xc6\xdc\x82\xb0\xd0\xf0\x03\x68\x2c\x51\xa3\xcc\x71\xe9\x97\xb9\xc6\xc1\x91\x90\xce\x91\xc1\x5c\xc9\x02\xf6\x5c\x73\x5d\x99\x93\xc7\x8c\xad\x56\xe4\xea\x0d\x1f\x34\x81\x20\xb7\x08\x4a\x22\xa8\x72\x4d\xbb\x70\xd3\x97\xd0\xb2\x17\x06\x68\xb9\xdd\x81\x55\xc0\x25\x60\xb3\xc5\xc2\x93\x32\x68\x89\xb7\x30\x44\xb6\x33\x9e\xa8\xaf\xaf\x6f\xf6\xbc\xee\xf0\xdb\xb4\x07\xf4\x89\xb6\xec\xb3\x19\x5c\xd3\x83\x5c\x49\xcb\x85\x24\xa1\xa7\x6b\xf3\xdc\x76\xbc\x9e\x44\x3b\xdc\x32\x57\x05\x7a\x61\xbc\x24\xd1\x9b\x99\x3c\xce\x45\xdb\x9f\x99\x37\x83\x64\xb1\x19\x7a\x80\x57\x4d\x16\xad\x56\x90\x3b\xa1\x76\xd7\x1a\xbf\x6a\x1d\xba\x9e\xff\xfa\x78\xde\x6d\x46\xfb\x49\xea\x21\x79\x51\x38\x3c\xfc\x60\x35\x3f\xbd\x6d\x62\x77\x48\x12\xbc\x53\x5d\x5d\x80\x54\x16\x84\xcc\xeb\xae\xf0\xbe\x51\x5a\x7d\x68\x95\x90\x16\x62\xba\x47\x1c\xec\x52\x16\x51\x0f\xfd\x73\x39\xd2\x76\xcd\x25\x4d\x18\x8f\x10\x7f\xb8\x4a\xc1\x3e\x5f\x15\xe9\xd4\x2d\x8c\xe3\x91\xbd\x2c\x42\x93\x36\xc9\x62\x70\xf9\x39\xa8\xc7\xf0\x08\xa1\x02\x5d\xf1\x74\x75\x5f\x10\xec\xd3\x44\xce\x93\xe3\x62\xbf\x9e\xb9\x3e\xce\xc7\x99\x13\xfe\x84\x61\x98\xa5\xce\xe8\x5d\xe7\xa1\xd7\x1f\x8f\xff\x30\x20\xac\x27\x1d\xe0\xfc\x22\xeb\xd9\xca\xd1\xeb\xd6\x58\xb4\x28\x50\xae\x7c\x2e\xaa\x54\xa8\x3a\x21\xad\x1a\xed\x59\xae\x2b\xb4\xa0\xb6\xef\x31\xb7\x61\xfc\x08\xad\xac\x17\xe5\xd4\xc3\xbf\x94\xc5\x6f\xbc\x16\x05\xb7\x98\x04\xab\x49\xcd\x09\xd9\x76\xd6\xb5\x8a\x50\xe7\x29\xd0\x34\x34\x9a\x47\x34\x9a\xae\xb6\x67\x31\xcd\xce\x89\x65\x27\x2f\x1f\xeb\x43\x83\xb7\xf4\x63\xb1\x0f\x61\x77\x27\x9e\x79\xff\x1e\x3f\x71\x37\x8a\xf6\x5c\x43\x63\x2a\xb8\x85\x38\x66\x51\x5f\x55\xa3\x82\x0a\x36\x6f\xdc\x18\x1a\x8c\x22\xb2\xf8\xdf\x2d\x94\x8d\xcd\x36\xad\x16\xd2\x96\x49\xfc\xce\xde\xc0\x73\xf3\x4e\xc6\x4b\xc0\x6c\xe3\x94\x33\xa1\xab\x8d\x7b\xbc\x1f\x66\x89\x4a\x32\xb1\x75\x8f\xb6\xf7\xb4\x85\x92\x50\x72\x1a\xd5\xd7\xef\xe4\x73\x13\x2f\xe9\x7e\x69\x7a\xaa\x0a\x77\x56\x18\x7f\xfc\xff\x60\x35\x97\xa6\x76\x62\xa5\xe0\x55\x27\xea\xe2\x2d\xfe\xdd\xa1\xa1\xc7\x31\x96\xcb\x1c\xa9\x5f\x92\x82\xba\x98\x53\x40\xc9\xff\x77\x7e\x29\x71\x39\x41\x0b\x6f\xf1\x42\x58\x83\x61\xf6\xab\xc1\xbb\xae\xd9\x3a\x31\x0b\x25\xdf\x6f\x79\xa0\x90\x10\x57\xbd\xc4\x50\x15\x21\x79\xfb\xf7\xf6\x1d\x6d\x96\xb6\x24\x03\xb5\x40\x03\xf7\x82\xda\x10\x35\x9c\xfe\xe7\xcb\xe5\x6c\x3d\xe5\xcf\xc5\xc1\x79\x9a\x92\xf4\xfe\xfe\x89\xcf\x7e\xb9\xbc\x75\x8b\xec\x09\x43\xf4\x38\xcb\x9f\x90\xe4\x3e\x75\xa6\x8a\x9c\xce\x87\xdb\xaf\xe9\x65\x71\xe6\x66\x98\x0b\xbf\xd0\xcb\x85\xa9\x34\x9d\x0f\x9f\x5f\xd1\xc9\x88\xc9\x68\x48\xfc\x42\x07\xe7\x53\x64\x7a\x52\x94\x8f\x65\x3a\x60\x6d\x10\xfe\x1b\xb2\x33\x29\xd9\x7f\x02\x00\x00\xff\xff\x06\x0d\x05\x51\xcd\x10\x00\x00")

func internalCommonAssetsSupportGoBytes() ([]byte, error) {
	return bindataRead(
		_internalCommonAssetsSupportGo,
		"internal/common/assets/support.go",
	)
}

func internalCommonAssetsSupportGo() (*asset, error) {
	bytes, err := internalCommonAssetsSupportGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/common/assets/support.go", size: 4301, mode: os.FileMode(420), modTime: time.Unix(1543078144, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x9a, 0x70, 0xbe, 0x9, 0x1b, 0xf6, 0xc1, 0xcf, 0xaf, 0x3d, 0xde, 0xe8, 0xd2, 0x69, 0x2f, 0x2f, 0xac, 0xb4, 0x82, 0xc8, 0x1f, 0xdf, 0xa5, 0x1, 0xd8, 0xe1, 0x61, 0x5c, 0xb6, 0xd0, 0xe9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/common/assets/resource.action.json": internalCommonAssetsResourceActionJson,

	"internal/common/assets/resource.init.request.json": internalCommonAssetsResourceInitRequestJson,

	"internal/common/assets/resource.init.response.json": internalCommonAssetsResourceInitResponseJson,

	"internal/common/assets/schemas.go": internalCommonAssetsSchemasGo,

	"internal/common/assets/support.go": internalCommonAssetsSupportGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"resource.action.json":        &bintree{internalCommonAssetsResourceActionJson, map[string]*bintree{}},
				"resource.init.request.json":  &bintree{internalCommonAssetsResourceInitRequestJson, map[string]*bintree{}},
				"resource.init.response.json": &bintree{internalCommonAssetsResourceInitResponseJson, map[string]*bintree{}},
				"schemas.go":                  &bintree{internalCommonAssetsSchemasGo, map[string]*bintree{}},
				"support.go":                  &bintree{internalCommonAssetsSupportGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
